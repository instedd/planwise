version: 2.1

commands:
  installpackages:
    description: "Install APT dependencies for test and release builds"
    steps:
      - run: |
          sudo apt update
          sudo apt install -y build-essential cmake \
            libboost-timer-dev libboost-program-options-dev \
            libboost-filesystem-dev \
            libpq-dev libgdal-dev postgresql-client libpq-dev \
            gdal-bin python-gdal libgdal-java

jobs:
  test:
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: starefossen/pgrouting:10.1-2.4-2.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: planwise
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TEST_DATABASE_URL: jdbc:postgresql://localhost/planwise?user=postgres
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-planwise-m2-{{ checksum "project.clj" }}-{{ checksum "client/shadow-cljs.edn" }}
            - v2-planwise-m2-
      - installpackages
      - run: lein test
      - run: |
          cd client
          npm install
      - run: |
          cd client
          npm run test
      - run: lein check-format
      - save_cache:
          key: v2-planwise-m2-{{ checksum "project.clj" }}-{{ checksum "client/shadow-cljs.edn" }}
          paths:
            - ~/.m2
            - client/node_modules

  deploy:
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v2-planwise-m2-{{ checksum "project.clj" }}-{{ checksum "client/shadow-cljs.edn" }}
            - v2-planwise-m2-
      - installpackages
      - run: git describe --always > resources/planwise/version
      - run: |
          cd client
          npm install
      - run: |
          cd client
          npm run release
      - run: lein uberjar
      - run: scripts/build-binaries --release
      - run: |
          ./deploy.sh ${CIRCLE_TAG:-${CIRCLE_BRANCH/#master/latest}}

  mapserver:
    docker:
      - image: docker:20-git
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          ./mapserver/deploy.sh ${CIRCLE_TAG:-${CIRCLE_BRANCH/#master/latest}}

workflows:
  version: 2
  ci:
    jobs:
      - test:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - stable
                - /.*\bci\b.*/
            tags:
              only:
                - /[0-9]+(\.[0-9]+)*(-pre\d+)?/
      - mapserver:
          requires:
            - deploy

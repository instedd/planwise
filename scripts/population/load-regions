#!/bin/bash
set -euo pipefail

export PGPASSWORD=$POSTGRES_PASSWORD;

if [ $# -lt 2 ]; then
    echo "Usage $0 <ISO> <Country Name>"
    exit 1
fi

COUNTRY_CODE=$1
COUNTRY_NAME=$2
#LEVELS=${2:-2,4}
LEVELS=(0,1)
echo "   -> Importing $COUNTRY_NAME at levels $LEVELS"

# check if country was already imported
REGIONS=$(psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A -c "SELECT id, country FROM regions WHERE country = '$COUNTRY_NAME';")
REGIONS_LEN=$(echo $REGIONS | wc -w | tr -d '[[:space:]]')

if [ ${REGIONS_LEN} -gt 0 ]; then
  echo "   -> Regions for country $COUNTRY_NAME already imported."
  exit 0
fi

DATA_PATH=${DATA_PATH:-/data}/geojson

mkdir -p ${DATA_PATH}

# if the folder (still) doesn't exist then exit with error
if [[ ! -e ${DATA_PATH}/$COUNTRY_CODE ]]; then
  echo "   -> GeoJSON folder not found for country $COUNTRY_NAME"
  exit 1
fi

# Simplification parameter
# From mapshaper wiki https://github.com/mbloch/mapshaper/wiki/Command-Reference#-simplify
#
# interval= Specify simplification amount in units of distance.
#           Uses meters when simplifying unprojected datasets in 3D space (see planar option below),
#           otherwise uses the same units as the source data.
INTERVAL_DISTANCE=${INTERVAL_DISTANCE-1000}

IFS=',';
for i in $LEVELS; do
  FILE=${DATA_PATH}/${COUNTRY_CODE}/${COUNTRY_CODE}_adm${i}.geojson
  echo -n "   -> Processing $FILE ... "

  OFILE=$FILE
  if [[ ! -z $INTERVAL_DISTANCE ]]; then
    # Simplify using distance
    OFILE=${DATA_PATH}/${COUNTRY_CODE}/${COUNTRY_CODE}_adm${i}_${INTERVAL_DISTANCE}.geojson

    mapshaper $FILE -simplify interval=$INTERVAL_DISTANCE -o $OFILE
  fi

  psql -q -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT << SQL_SCRIPT

    WITH data AS (SELECT \$$`cat $OFILE`\$$::json AS fc)
    INSERT INTO "regions" (country, name, admin_level, the_geom)
    SELECT
      '${COUNTRY_NAME}',
      feat#>>'{properties,name}' AS name,
      ${i},
      ST_SetSRID(ST_CollectionExtract(ST_Multi(ST_GeomFromGeoJSON(feat->>'geometry')), 3), 4326) as the_geom
    FROM (
      SELECT json_array_elements(fc->'features') AS feat
      FROM data
    ) AS f;

SQL_SCRIPT
  # TODO: print errors
  echo " done!"
done;

echo "Don't forget to update the region previews by running"
echo "  update-region-previews gen"

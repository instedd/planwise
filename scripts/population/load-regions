#! /bin/bash
set -euo pipefail

COUNTRY=$1
LEVELS=${2:-2,4}
echo "Importing $COUNTRY at levels $LEVELS"

export PGPASSWORD=$POSTGRES_PASSWORD;
DATA_PATH=${DATA_PATH:-data}

mkdir -p ${DATA_PATH}

if [[ ! -e ${DATA_PATH}/$COUNTRY ]]; then
  curl -f -o ${DATA_PATH}/${COUNTRY}_geojson.tgz https://s3.amazonaws.com/osm-polygons.mapzen.com/${COUNTRY}_geojson.tgz
  tar -xzf ${DATA_PATH}/${COUNTRY}_geojson.tgz -C ${DATA_PATH}
fi

IFS=',';
for i in $LEVELS; do
FILE=${DATA_PATH}/${COUNTRY}/admin_level_${i}.geojson
echo " Processing $FILE"
psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT << SQL_SCRIPT

  WITH data AS (SELECT \$$`cat $FILE`\$$::json AS fc)
  INSERT INTO "regions" (country, name, admin_level, the_geom)
  SELECT
    '${COUNTRY}',
    feat#>>'{properties,name}' AS name,
    (feat#>>'{properties,admin_level}')::integer AS admin_level,
    ST_SetSRID(ST_GeomFromGeoJSON(feat->>'geometry'), 4326) as the_geom
  FROM (
    SELECT json_array_elements(fc->'features') AS feat
    FROM data
  ) AS f;

SQL_SCRIPT
done;

echo
echo "Calculating geometry previews"
psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT << SQL_SCRIPT
  SELECT calculate_regions_previews();
SQL_SCRIPT

# $(dirname "${BASH_SOURCE}")/regions-population $COUNTRY

# TODO:
# if [[ "${RASTER_ISOCHRONES}" != "false" ]]; then
#   $(dirname "${BASH_SOURCE}")/raster-regions
# fi

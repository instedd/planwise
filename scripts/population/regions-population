#!/bin/bash
set -euo pipefail
export PGPASSWORD=$POSTGRES_PASSWORD;

source $(dirname "${BASH_SOURCE}")/env-vars

# Creates raster files data/populations/(data|maps)/REGIONID.tif with the population
# values of each REGIONID in the regions table and those same values
# scaled to byte for visualisation in mapserver respectively.

BIN_PATH=${BIN_PATH:-cpp}
SCRIPT_PATH=${SCRIPT_PATH:-scripts}
DATA_PATH=${DATA_PATH:-data}

function target_resolution {
    raster_name=$1
    gdalinfo $raster_name | grep "Pixel Size" | sed -E 's/.*\(([^)]*).*/\1/g' | tr ',' ' '
}

###############################################################################

echo "   -> Precalculating population aggregates per region"

PARAM_COUNTRY=$1
PARAM_ID_SOURCE=$2

cd $(dirname "${BASH_SOURCE}")${APP_FOLDER}

REGIONS=$(psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A -c "SELECT id, country FROM regions WHERE country = '$PARAM_COUNTRY';")
echo "   -> Regions to process: $(echo $REGIONS | wc -w | tr -d '[[:space:]]')"

SOURCE_ROW=$(psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A -c "SELECT id, name, tif_file FROM population_sources WHERE id = '$PARAM_ID_SOURCE';")
RASTER_FILENAME=`echo $SOURCE_ROW | cut -d \| -f 3`
echo -n "   -> Filename to process: $(echo $RASTER_FILENAME) ... "

RASTER=$DATA_PATH/$RASTER_FILENAME
if [ ! -e $RASTER ]; then
  echo " not found."
  exit 1
fi
echo " found!"

# Generate overviews file
gdaladdo -clean $RASTER
gdaladdo $RASTER -ro --config COMPRESS_OVERVIEW DEFLATE -r average 2 4 8 16 32 64

mkdir -p ${DATA_PATH}/populations/data/${PARAM_ID_SOURCE}
mkdir -p ${DATA_PATH}/populations/maps/${PARAM_ID_SOURCE}

for region in $REGIONS; do
  ID=`echo $region | cut -d \| -f 1`

  DATA_TARGET=${DATA_PATH}/populations/data/${PARAM_ID_SOURCE}/${ID}.tif
  VIZ_TARGET=${DATA_PATH}/populations/maps/${PARAM_ID_SOURCE}/${ID}.tif

  if [[ ! -e $DATA_TARGET || ! -e $VIZ_TARGET || "`gdalinfo $DATA_TARGET | grep -e POPULATION_SUM -e POPULATION_MAX -e PIXEL_AREA_M2 | wc -l`" -ne 3 ]]; then

    resolution=$(target_resolution $RASTER)
    echo "   -> Warping population for ${ID}"
    gdalwarp -q \
      -tap \
      -tr $resolution \
      -co "TILED=YES" -co "BLOCKXSIZE=128" -co "BLOCKYSIZE=128" \
      -crop_to_cutline \
      -cutline PG:"dbname=${POSTGRES_DB} port=${POSTGRES_PORT} host=${POSTGRES_HOST} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD}" \
      -csql "SELECT the_geom FROM regions WHERE id = ${ID};" \
      $RASTER $DATA_TARGET

    echo "   -> Aggregating population for ${ID}"
    IFS=' ' read -a AGGREGATES <<< $(${BIN_PATH}/aggregate-population ${DATA_TARGET})
    POPULATION_SUM=${AGGREGATES[0]}
    POPULATION_MAX=${AGGREGATES[1]}

    echo "   -> Calculating pixel area for ${ID}"

    IFS=' ' read -a RET <<< $(${SCRIPT_PATH}/raster-pixel-size ${DATA_TARGET})
    PIXEL_AREA_M2=${RET[0]}
    SATURATION=${RET[1]}

    echo "   -> Normalizing raster file scale for ${ID}"
    gdal_translate -q -ot Byte -scale 0 $SATURATION 0 255 $DATA_TARGET $VIZ_TARGET

    echo "   -> Storing metadata for ${ID}"
    for target in $DATA_TARGET $VIZ_TARGET; do
      gdal_edit.py -mo "POPULATION_SUM=$POPULATION_SUM" -mo "POPULATION_MAX=$POPULATION_MAX" -mo "PIXEL_AREA_M2=$PIXEL_AREA_M2" $target
    done

  fi;

  TOTAL_POPULATION=`gdalinfo $DATA_TARGET | grep POPULATION_SUM | cut -d = -f2`
  MAX_POPULATION=`gdalinfo $DATA_TARGET | grep POPULATION_MAX | cut -d = -f2`
  PIXEL_AREA_M2=`gdalinfo $DATA_TARGET | grep PIXEL_AREA_M2 | cut -d = -f2`

  echo "   -> Updating population for ${ID}: ${TOTAL_POPULATION}"
  psql  -d $POSTGRES_DB -U $POSTGRES_USER \
        -h $POSTGRES_HOST -p $POSTGRES_PORT << SQL_SCRIPT
          INSERT INTO "populations" (source_id, region_id, total_population, max_population, raster_pixel_area)
            VALUES (${PARAM_ID_SOURCE}, ${ID}, ${TOTAL_POPULATION}, ${MAX_POPULATION}, ${PIXEL_AREA_M2});
SQL_SCRIPT

done;

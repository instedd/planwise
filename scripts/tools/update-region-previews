#!/usr/bin/env bb

(require '[babashka.pods :as pods])
(pods/load-pod 'org.babashka/postgresql "0.0.7")

(require '[pod.babashka.postgresql :as pg]
         '[clojure.java.shell :refer [sh]]
         '[clojure.java.io :as io]
         '[clojure.pprint :refer [print-table]])

(def db {:dbtype   "postgresql"
         :host     (or (System/getenv "POSTGRES_HOST") "localhost")
         :dbname   (or (System/getenv "POSTGRES_DB") "planwise")
         :user     (or (System/getenv "POSTGRES_USER") "planwise")
         :password (or (System/getenv "POSTGRES_PASSWORD") "planwise")
         :port     (or (some-> (System/getenv "POSTGRES_PORT") Integer/parseInt) 5432)})

(defn- get-region-sizes
  []
  (pg/execute! db ["select id, admin_level, country, name, length(st_asgeojson(the_geom)) as geom_size, length(st_asgeojson(preview_geom)) as preview_size from regions order by id"]))

(defn- get-regions
  []
  (pg/execute! db ["select id, admin_level, country, name from regions order by id"]))

(defn- read-region-geom
  [region-id]
  (->> (pg/execute-one! db ["select st_asgeojson(the_geom) as result from regions where id = ?" region-id])
       :result))

(defn- write-region-preview
  [region-id geojson]
  (pg/execute! db ["update regions set preview_geom = st_setsrid(st_collectionextract(st_geomfromgeojson(?),3),4326) where id = ?" geojson region-id]))

(defn- temp-filename
  [suffix]
  (-> (doto (File/createTempFile "planwise" suffix) (.deleteOnExit))
      .getPath))

(defn- run-mapshaper-simplify
  [filename amount]
  (sh "mapshaper" filename "-simplify" (str amount "%") "-o" filename "force" "format=geojson"))

(defn- simplify-amount
  [file-size desired-size]
  (-> (/ desired-size file-size)
      (* 100)
      (min 90)
      (max 10)
      double))

(defn- shrink-geojson
  [geojson desired-size]
  (let [tempfile (temp-filename ".json")]

    (spit tempfile geojson)
    (print "File size: ")
    (loop []
      (let [file-size (.length (io/file tempfile))]
        (print file-size)
        (if (> file-size desired-size)
          (do
            (print "... ")
            (flush)
            (let [simplify-amount    (simplify-amount file-size desired-size)
                  {:keys [exit out]} (run-mapshaper-simplify tempfile simplify-amount)]
              (if (zero? exit)
                (recur)
                (println "\nSome error occurred simplifying the GeoJSON:\n" out))))
          (println " DONE"))))
    (slurp tempfile)))

(def *desired-geojson-size* (* 4 1024))

(defn- process-region
  [region-id]
  (-> (read-region-geom region-id)
      (shrink-geojson *desired-geojson-size*)
      (->> (write-region-preview region-id))))

(defn- process-all-regions
  []
  (let [regions (get-regions)]
    (dorun
     (for [region regions]
       (let [{:regions/keys [id name country]} region]
         (println (str "Processing region #" id ": " name " (" country ")"))
         (process-region id))))))

(process-region 54)
(print-table (get-region-sizes))

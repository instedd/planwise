#! /bin/bash
set -euo pipefail
export PGPASSWORD=$POSTGRES_PASSWORD;

# Creates raster files data/populations/(data|maps)/REGIONID.tif with the population
# values of each REGIONID in the regions table and those same values
# scaled to byte for visualisation in mapserver respectively.

BIN_PATH=${BIN_PATH:-cpp}
SCRIPT_PATH=${SCRIPT_PATH:-scripts}
DATA_PATH=${DATA_PATH:-data}

function base-raster {
    case $1 in
        kenya)        echo KEN_popmap15_v2b.tif;;
        tanzania)     echo TZA_popmap15_v2b.tif;;
        ethiopia)     echo ETH15v5.tif;;
        nigeria)      echo NGA14adjv1.tif;;
        south-africa) echo ZAF15v4.tif;;
        niger)        echo NER15adjv4.tif;;
        uganda)       echo UGA_ppp_v2b_2015_UNadj.tif;;
        *)
            echo Unknown country $1
            exit 1
    esac
}

function target_resolution {
    raster_name=$1
    gdalinfo $raster_name | grep "Pixel Size" | sed -E 's/.*\(([^)]*).*/\1/g' | tr ',' ' '
}

echo "Precalculating population aggregates per region"
REGIONS_QUERY="SELECT id ,country FROM regions WHERE total_population IS NULL OR max_population IS NULL OR raster_pixel_area IS NULL;"
if [ $# -gt 1 ]; then
  if [ "all" == $2 ]; then
    REGIONS_QUERY="SELECT id, country FROM regions;"
  fi
fi

REGIONS=$(psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A -c "$REGIONS_QUERY")
echo "Regions to process: $(echo $REGIONS | wc -w | tr -d '[[:space:]]')"

mkdir -p ${DATA_PATH}/populations/data
mkdir -p ${DATA_PATH}/populations/maps

for region in $REGIONS; do
  ID=`echo $region | cut -d \| -f 1`
  COUNTRY=`echo $region | cut -d \| -f 2`
  RASTER=${DATA_PATH}/`base-raster ${COUNTRY}`
  DATA_URL="https://s3.amazonaws.com/planwise/data"

  if [[ ! -e $RASTER ]]; then
    echo " Downloading population file for $COUNTRY"
    curl -f -o $RASTER $DATA_URL/$(base-raster $COUNTRY) || (curl -f $DATA_URL/$(base-raster $COUNTRY).gz | gzip -d > $RASTER)
    gdaladdo $RASTER -r average 2 4 8 16 32 64
  fi

  DATA_TARGET=${DATA_PATH}/populations/data/${ID}.tif
  VIZ_TARGET=${DATA_PATH}/populations/maps/${ID}.tif

  if [[ ! -e $DATA_TARGET || ! -e $VIZ_TARGET || "`gdalinfo $DATA_TARGET | grep -e POPULATION_SUM -e POPULATION_MAX -e PIXEL_AREA_M2 | wc -l`" -ne 3 ]]; then

    resolution=$(target_resolution $RASTER)
    echo " Warping population for ${ID}"
    gdalwarp -q \
      -tap \
      -tr $resolution \
      -co "TILED=YES" -co "BLOCKXSIZE=128" -co "BLOCKYSIZE=128" \
      -crop_to_cutline \
      -cutline PG:"dbname=${POSTGRES_DB} port=${POSTGRES_PORT} host=${POSTGRES_HOST} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD}" \
      -csql "SELECT the_geom FROM regions WHERE id = ${ID};" \
      $RASTER $DATA_TARGET

    echo " Aggregating population for ${ID}"
    IFS=' ' read -a AGGREGATES <<< $(${BIN_PATH}/aggregate-population ${DATA_TARGET})
    POPULATION_SUM=${AGGREGATES[0]}
    POPULATION_MAX=${AGGREGATES[1]}

    echo " Calculating pixel area for ${ID}"

    IFS=' ' read -a RET <<< $(${SCRIPT_PATH}/raster-pixel-size ${DATA_TARGET})
    PIXEL_AREA_M2=${RET[0]}
    SATURATION=${RET[1]}

    echo " Normalizing raster file scale for ${ID}"
    gdal_translate -q -ot Byte -scale 0 $SATURATION 0 255 $DATA_TARGET $VIZ_TARGET

    echo " Storing metadata for ${ID}"
    for target in $DATA_TARGET $VIZ_TARGET; do
      gdal_edit.py -mo "POPULATION_SUM=$POPULATION_SUM" -mo "POPULATION_MAX=$POPULATION_MAX" -mo "PIXEL_AREA_M2=$PIXEL_AREA_M2" $target
    done

  fi;

  TOTAL_POPULATION=`gdalinfo $DATA_TARGET | grep POPULATION_SUM | cut -d = -f2`
  MAX_POPULATION=`gdalinfo $DATA_TARGET | grep POPULATION_MAX | cut -d = -f2`
  PIXEL_AREA_M2=`gdalinfo $DATA_TARGET | grep PIXEL_AREA_M2 | cut -d = -f2`

  echo " Updating population for ${ID}: ${TOTAL_POPULATION}"
  psql -q -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A \
       -c "UPDATE regions SET total_population = ${TOTAL_POPULATION}, max_population = ${MAX_POPULATION}, raster_pixel_area = ${PIXEL_AREA_M2} WHERE id = ${ID}";
done;

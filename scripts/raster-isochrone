#! /bin/bash
set -euo pipefail
export PGPASSWORD=$POSTGRES_PASSWORD;

# Creates a byte-sized raster file data/isochrones/REGIONID/FACILITY_POLYGON_ID.tif,
# with a 255 value for each facility polygon, intersected with the specified REGION,
# with the same size and extent as the REGION raster

# Prints the total population for the rendered region

# This script is invoked from the facilities service

# FIXME: adapt for normalized population rasters if necessary

function query {
    psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -t -A -c "$1";
}

function calculate_extent {
    region_id=$1
    facility_polygon_id=$2
    resolution=$3
    block_size=$4
    query="select calculate_aligned_extent(${facility_polygon_id}, ${region_id}, ${resolution}, ${block_size});"
    psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT -A -t -c "$query"
}

function pixel_size {
    raster_name=$1
    gdalinfo $raster_name | grep "Pixel Size" | sed -E 's/.*\(([^,]*).*/\1/g'
}

function block_size {
    raster_name=$1
    gdalinfo $raster_name | grep "Block=" | sed -E 's/.*Block=([^x]*).*/\1/g'
}

if [ $# -lt 2 ]; then
  echo "Usage: $0 REGION_ID FACILITY_POLYGON_ID [SCALE]"
	exit 1
fi

DATA_PATH=${DATA_PATH:-data}
BIN_PATH=${BIN_PATH:-cpp}
REGION_ID=$1
FACILITY_POLYGON_ID=$2

SCALE=1
if [ $# -ge 3 ]; then
  SCALE=$3
fi

# Create facility-polygon-region mask tif

REGION_FILE=${DATA_PATH}/regions/${REGION_ID}.tif
if [[ ! -e $REGION_FILE ]]; then
  echo "ERROR: Region raster mask ${REGION_FILE} not found";
  exit 1;
fi;

mkdir -p ${DATA_PATH}/isochrones/${REGION_ID}
TARGET=${DATA_PATH}/isochrones/${REGION_ID}/${FACILITY_POLYGON_ID}.tif

resolution=$(pixel_size $REGION_FILE)
block_size=$(block_size $REGION_FILE)

extent=$(calculate_extent $REGION_ID $FACILITY_POLYGON_ID $resolution $block_size)
IFS="|" read target_minx target_miny target_maxx target_maxy <<< $extent

if [[ ! -e $TARGET ]]; then
  gdalwarp -q \
    -te $target_minx $target_miny $target_maxx $target_maxy \
    -tap \
    -tr $resolution -$resolution \
    -co "TILED=YES" -co "BLOCKXSIZE=128" -co "BLOCKYSIZE=128"  \
    -co "NBITS=1" -co "COMPRESS=CCITTFAX4" \
    -cutline PG:"dbname=${POSTGRES_DB} host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD}" \
    -csql "SELECT the_geom FROM facilities_polygons WHERE id = ${FACILITY_POLYGON_ID};" \
    $REGION_FILE $TARGET
fi;

# Create facility-polygon-region population vrt to count population

POPULATION_FILE=${DATA_PATH}/populations/data/${REGION_ID}.tif
if [[ ! -e $POPULATION_FILE ]]; then
  echo "ERROR: Region population raster ${POPULATION_FILE} not found";
  exit 1;
fi;

VRT_TARGET=${DATA_PATH}/isochrones/${REGION_ID}/${FACILITY_POLYGON_ID}.vrt

scaled_resolution=$resolution
if [[ $SCALE -ne 1 ]]; then
  scaled_resolution=$(python -c "print ${resolution} * ${SCALE}")
fi

gdalwarp -q \
  -overwrite \
  -cutline PG:"dbname=${POSTGRES_DB} host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD}" \
  -csql "SELECT the_geom FROM facilities_polygons WHERE id = ${FACILITY_POLYGON_ID};" \
  -dstnodata 0 \
  -crop_to_cutline \
  -of VRT \
  -tap \
  -tr $scaled_resolution -$scaled_resolution \
  $POPULATION_FILE $VRT_TARGET

IFS=' ' read -a AGGREGATES <<< $(${BIN_PATH}/aggregate-population ${VRT_TARGET})
if [[ $SCALE -eq 1 ]]; then
  echo ${AGGREGATES[0]}
else
  echo $(python -c "print ${AGGREGATES[0]} * ${SCALE} * ${SCALE}")
fi

rm ${VRT_TARGET}
